name: Deploy Hugo site to Pages  # 工作流名称：Hugo 站点部署到 GitHub Pages

# 触发条件
on:
  push:
    branches: [ "main" ]  # 仅当 main 分支有推送时触发
  workflow_dispatch:      # 允许在 GitHub Actions 页面手动触发

# 权限配置
permissions:
  contents: read   # 读取仓库内容
  pages: write     # 写入 GitHub Pages
  id-token: write  # 生成部署用的 JWT token

# 并发控制（避免同时多个部署）
concurrency:
  group: "pages"         # 同一分组的工作流会排队
  cancel-in-progress: false  # 不取消正在运行的部署

# 默认设置
defaults:
  run:
    shell: bash  # 所有步骤默认使用 bash shell

jobs:
  build:  # 构建任务
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.145.0      # 指定 Hugo 版本（必须用 extended 版）
      HUGO_ENVIRONMENT: production  # 生产环境构建
      TZ: America/Los_Angeles    # 设置时区

    steps:
      # 1. 安装 Hugo CLI（扩展版）
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      # 2. 安装 Dart Sass（用于 SCSS 编译）
      - name: Install Dart Sass
        run: sudo snap install dart-sass

      # 3. 检出代码（含子模块）
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive  # 递归初始化子模块（如主题）
          fetch-depth: 0         # 获取完整提交历史（避免浅克隆问题）

      # 4. 配置 Pages 环境
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5  # 自动生成 baseURL

      # 5. 安装 Node.js 依赖（如果有 package.json）
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      # 6. 缓存恢复（加速后续构建）
      - name: Cache Restore
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ runner.temp }}/hugo_cache
          key: hugo-${{ github.run_id }}
          restore-keys:
            hugo-

      # 7. 配置 Git（防止中文路径问题）
      - name: Configure Git
        run: git config core.quotepath false

      # 8. Hugo 构建核心步骤
      - name: Build with Hugo
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/" \
            --cacheDir "${{ runner.temp }}/hugo_cache"

      # 9. 保存缓存
      - name: Cache Save
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: ${{ runner.temp }}/hugo_cache
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      # 10. 上传构建产物
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public  # 上传 Hugo 生成的 public 目录

  # 部署任务（依赖构建任务）
  deploy:
    environment:
      name: github-pages  # 使用 GitHub Pages 环境
      url: ${{ steps.deployment.outputs.page_url }}  # 部署后的 URL
    runs-on: ubuntu-latest
    needs: build  # 必须等待 build 任务完成
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # 官方部署 Action
